{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","components/NewCommentForm/NewCommentForm.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","index.js"],"names":["PostsList","postsList","detailsToggler","currentActivePost","className","map","post","key","uuid","userId","body","type","onClick","event","id","defaultProps","BASE_URL","NewCommentForm","setComment","postId","useState","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","handleInputChange","target","name","value","onSubmit","preventDefault","comment","email","option","method","headers","JSON","stringify","fetch","then","response","ok","json","Promise","reject","status","res","data","catch","error","console","placeholder","required","onChange","getUserPosts","posts","filter","toString","PostDetails","postContent","setPostContent","postComments","setPostComments","showComments","setShowComments","removeComment","length","elementId","split","currentArray","useEffect","getPostDetails","comments","getPostComments","index","userPosts","App","setUserId","selectedPostId","setselectedPostId","setPostsList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39a194d7.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'react-uuid';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ postsList, detailsToggler, currentActivePost }) => (\n  <>\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {\n          postsList.map(post => (\n            <li\n              key={uuid()}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  [User #\n                  {post.userId}\n                  ]:\n                  {' '}\n                </b>\n                {post.body}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={event => detailsToggler(event, post.id)}\n              >\n                {currentActivePost === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  </>\n);\n\nPostsList.propTypes = {\n  postsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    }),\n  ).isRequired,\n  detailsToggler: PropTypes.func.isRequired,\n  currentActivePost: PropTypes.number,\n};\n\nPostsList.defaultProps = {\n  currentActivePost: null,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { BASE_URL } from '../../api/api';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ setComment, postId }) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const comment = {\n      postId,\n      name: userName,\n      email: userEmail,\n      body: userComment,\n    };\n    const option = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(comment),\n    };\n\n    fetch(`${BASE_URL}/comments`, option)\n      .then((response) => {\n        if (!response.ok) {\n          return Promise.reject(response.status);\n        }\n\n        setUserName('');\n        setUserEmail('');\n        setUserComment('');\n\n        return response.json();\n      })\n      .then(res => setComment(res.data))\n      .catch((error) => {\n        // eslint-disable-next-line\n        console.error('There was an error!', error);\n      });\n  };\n\n  const handleInputChange = (event) => {\n    switch (event.target.name) {\n      case 'name':\n        setUserName(event.target.value);\n        break;\n\n      case 'email':\n        setUserEmail(event.target.value);\n        break;\n\n      case 'body':\n        setUserComment(event.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={userName}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={userEmail}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={userComment}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  setComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then((posts) => {\n    if (userId === '0') {\n      return posts.data;\n    }\n\n    return posts.data.filter(post => post.userId.toString() === userId);\n  });\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json());\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { BASE_URL } from '../../api/api';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [postContent, setPostContent] = useState('');\n  const [postComments, setPostComments] = useState([]);\n  const [showComments, setShowComments] = useState(false);\n\n  const commentsToggler = () => setShowComments(!showComments);\n\n  const setComment = (comment) => {\n    setPostComments(currentArray => [...currentArray, comment]);\n  };\n\n  const removeComment = (event) => {\n    if (postComments.length === 1) {\n      setShowComments(false);\n    }\n\n    const elementId = +event.target.id.split('_')[1];\n\n    fetch(`${BASE_URL}/comments/${elementId}`, { method: 'DELETE' })\n      .then((response) => {\n        if (!response.ok) {\n          return Promise.reject(response.status);\n        }\n\n        return response.json();\n      })\n      .catch((error) => {\n        // eslint-disable-next-line\n        console.error('There was an error!', error);\n      });\n    setPostComments(currentArray => currentArray\n      .filter(comment => comment.id !== elementId));\n  };\n\n  useEffect(() => {}, [postComments]);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(post => setPostContent(post.data.body));\n\n    getPostComments(postId)\n      .then(comments => setPostComments(comments));\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postContent}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length === 0 ? (\n          <p>No comments yet</p>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={commentsToggler}\n          >\n            {showComments\n              ? `Hide ${postComments.length} comments`\n              : `Show comments`\n            }\n          </button>\n        )}\n\n        {\n          showComments\n          && (\n          <ul className=\"PostDetails__list\">\n            {\n              postComments.map((comment, index) => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    id={`PostDetails-remove-btn_${comment.id}`}\n                    className=\"PostDetails__remove-button button\"\n                    onClick={removeComment}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))\n            }\n          </ul>\n          )\n        }\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            setComment={setComment}\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(comments => comments.data.filter(comment => comment.postId === postId));\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nlet userPosts = [];\n\ngetUserPosts('0')\n  .then((posts) => {\n    userPosts = [...posts];\n  });\n\nconst App = () => {\n  const [userId, setUserId] = useState('0');\n  const [selectedPostId, setselectedPostId] = useState(null);\n  const [postsList, setPostsList] = useState(userPosts);\n\n  const detailsToggler = (event, id) => setselectedPostId(id);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then(res => setPostsList([...res]));\n  }, [userId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={event => setUserId(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={postsList}\n            currentActivePost={selectedPostId}\n            detailsToggler={detailsToggler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}